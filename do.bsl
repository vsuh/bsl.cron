// message("*** DO.BSL ***");

// Считывание глобальных настроек
джГлоб = Новый ЧтениеJSON;
джГлоб.ОткрытьФайл(гуПуть+"\globals.json");
Глб = ПрочитатьJSON(джГлоб);  // см. Сообщить(Глб.general_email);
джГлоб.Закрыть();
// Считывает расписание задач
джГлоб = Новый ЧтениеJSON;
джГлоб.ОткрытьФайл(гуПуть+"\tasks.json");
Здч = ПрочитатьJSON(джГлоб, ,"date", ФорматДатыJSON.ISO);
джГлоб.Закрыть();

Сегодня = НачалоДня(ТекущаяДата());
тзМетоды = Новый ТаблицаЗначений;
тзМетоды.Колонки.Добавить("Метод");
тзМетоды.Колонки.Добавить("ДатаВыполнения");


Для Каждого зз Из Здч.tasks Цикл
  Метод = зз.Ключ;

  Периоды = Новый Массив;
  Для Каждого пп Из зз.Значение Цикл
    Если ТипЗнч(пп.Значение) <> Тип("Массив") Тогда
      мсПроверяемДни = Новый Массив;
      мсПроверяемДни.Добавить(пп.Значение);
    Иначе
      мсПроверяемДни = пп.Значение;
    КонецЕсли;

    Если НРег(пп.Ключ) = "dow" Тогда
      Для Каждого ПроверяемыйДень Из мсПроверяемДни Цикл
        текДатаВМесяце = НачалоНедели(Сегодня);
        Пока текДатаВМесяце <= КонецНедели(Сегодня) Цикл
              Если ДеньНедели(текДатаВМесяце) = ПроверяемыйДень Тогда
                мм = тзМетоды.Добавить();
                мм.Метод = Метод;
                мм.ДатаВыполнения = текДатаВМесяце;
              КонецЕсли;
              текДатаВМесяце = текДатаВМесяце + 24 * 60 * 60;
        КонецЦикла;
      КонецЦикла;

    ИначеЕсли НРег(пп.Ключ) = "dom" Тогда
      Для Каждого ПроверяемыйДень Из мсПроверяемДни Цикл
        текДатаВМесяце = НачалоМесяца(Сегодня);
        Пока текДатаВМесяце <= КонецМесяца(Сегодня) Цикл
              Если День(текДатаВМесяце) = ПроверяемыйДень Тогда
                мм = тзМетоды.Добавить();
                мм.Метод = Метод;
                мм.ДатаВыполнения = текДатаВМесяце;
              КонецЕсли;
              текДатаВМесяце = текДатаВМесяце + 24 * 60 * 60;
        КонецЦикла;
      КонецЦикла;
    ИначеЕсли НРег(пп.Ключ) = "date" Тогда
      Для Каждого ПроверяемыйДень Из мсПроверяемДни Цикл
        мм = тзМетоды.Добавить();
        мм.Метод = Метод;
        мм.ДатаВыполнения = пп.Значение;
      КонецЦикла;
    КонецЕсли;
  КонецЦикла;

КонецЦикла;

тзМетоды.Свернуть("Метод, ДатаВыполнения");
тзМетоды.Сортировать("Метод, ДатаВыполнения");

Для Каждого оо Из тзМетоды Цикл
  Если НачалоДня(оо.ДатаВыполнения) = НачалоДня(Сегодня) Тогда
    Сообщить(">> Выполняется "+оо.Метод);
    ИмяФайлаМетода = гуПуть+"\"+оо.Метод+".bsl";
    суФайл = Новый Файл(ИмяФайлаМетода);
    Если Не суФайл.Существует() Тогда
      ВызватьИсключение "Critical exception: Не найден "+ИмяФайлаМетода;
    КонецЕсли;

    суЧтен = Новый ЧтениеТекста(суФайл.ПолноеИмя, "UTF-8");
    суПроц = суЧтен.Прочитать();
    суЧтен.ЗАкрыть();

    Попытка
      Выполнить(суПроц);
    Исключение
      Сообщить("Не удалось выполнить; "+ОписаниеОшибки());
    КонецПопытки;

  КонецЕсли;
КонецЦикла;









